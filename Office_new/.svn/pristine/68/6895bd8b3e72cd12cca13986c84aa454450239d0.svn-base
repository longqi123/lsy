//
//  MoreViewController.swift
//  Office
//
//  Created by roger on 2017/3/30.
//  Copyright © 2017年 roger. All rights reserved.
//

import UIKit
import CoreFramework

private let SCREEN_WIDTH = UIScreen.main.bounds.width
private let SCREEN_HEIGHT = UIScreen.main.bounds.height

private let ChannelViewCellIdentifier = "ChannelViewCellIdentifier"
private let ChannelViewHeaderIdentifier = "ChannelViewHeaderIdentifier"

let itemW: CGFloat = (SCREEN_WIDTH - 100) * 0.25

class MoreViewController: BaseViewController {
    
    var switchoverCallback: ((_ selectedArr: [AppInfoModel]) -> ())?
    var headerArr = [["切换应用","点击添加更多应用"],["长按拖动排序","点击添加更多应用"]]
    var selectedArr = [AppInfoModel]()
    var recommendArr = [AppInfoModel]()
    
    var isEdite = false
    
    var indexPath: IndexPath?
    var targetIndexPath: IndexPath?
    
    
    init(a:[AppInfoModel]) {
        selectedArr = a
        selectedArr.removeLast()
        recommendArr = AppSquareManager.shareInstance.attentionData
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    //MARK: - 懒加载collectionView
    private lazy var collectionView: UICollectionView = {
        
        
        let clv = UICollectionView(frame: self.view.frame, collectionViewLayout: ChannelViewLayout())
        clv.backgroundColor = UIColor.B1
        clv.delegate = self
        clv.dataSource = self
        clv.register(ChannelViewCell.self, forCellWithReuseIdentifier: ChannelViewCellIdentifier)
        clv.register(ChannelHeaderView.self, forSupplementaryViewOfKind: UICollectionElementKindSectionHeader, withReuseIdentifier: ChannelViewHeaderIdentifier)
        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(longPressGesture(_:)))
        clv.addGestureRecognizer(longPress)
        
        return clv
    }()
    
    private lazy var dragingItem: ChannelViewCell = {
        
        let cell = ChannelViewCell(frame: CGRect(x: 0, y: 0, width: itemW, height: itemW * 0.5))
        cell.isHidden = true
        return cell
    }()
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let leftBtn: UIBarButtonItem = UIBarButtonItem(title: "返回", style: UIBarButtonItemStyle.plain, target: self, action: #selector(actionBack))
        leftBtn.title = "返回";
        leftBtn.tintColor = UIColor.white
        self.navigationItem.leftBarButtonItem=leftBtn;
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        AppSquareManager.shareInstance.attentionData = recommendArr
    }
    
    func actionBack(){
        if switchoverCallback != nil {
            switchoverCallback!(selectedArr)
        }
        navigationController?.popViewController(animated: true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.title = "应用管理"
        view.addSubview(collectionView)
        collectionView.addSubview(dragingItem)
    }
    
    //MARK: - 长按动作
    func longPressGesture(_ tap: UILongPressGestureRecognizer) {
        
        if !isEdite {
            
            isEdite = !isEdite
            collectionView.reloadData()
            return
        }
        let point = tap.location(in: collectionView)
        
        switch tap.state {
        case UIGestureRecognizerState.began:
            dragBegan(point: point)
        case UIGestureRecognizerState.changed:
            drageChanged(point: point)
        case UIGestureRecognizerState.ended:
            drageEnded(point: point)
        case UIGestureRecognizerState.cancelled:
            drageEnded(point: point)
        default: break
            
        }
        
    }
    
    //MARK: - 长按开始
    private func dragBegan(point: CGPoint) {
        indexPath = collectionView.indexPathForItem(at: point)
        if indexPath == nil || (indexPath?.section)! > 0 || indexPath?.item == 0
        {return}
        
        let item = collectionView.cellForItem(at: indexPath!) as? ChannelViewCell
        item?.isHidden = true
        dragingItem.isHidden = false
        dragingItem.frame = (item?.frame)!
        dragingItem.text = item!.text
        dragingItem.transform = CGAffineTransform(scaleX: 1.1, y: 1.1)
    }
    //MARK: - 长按过程
    private func drageChanged(point: CGPoint) {
        if indexPath == nil || (indexPath?.section)! > 0 || indexPath?.item == 0 {return}
        dragingItem.center = point
        targetIndexPath = collectionView.indexPathForItem(at: point)
        if targetIndexPath == nil || (targetIndexPath?.section)! > 0 || indexPath == targetIndexPath || targetIndexPath?.item == 0 {return}
        // 更新数据
        let obj = selectedArr[indexPath!.item]
        selectedArr.remove(at: indexPath!.row)
        selectedArr.insert(obj, at: targetIndexPath!.item)
        //交换位置
        collectionView.moveItem(at: indexPath!, to: targetIndexPath!)
        indexPath = targetIndexPath
    }
    
    //MARK: - 长按结束
    private func drageEnded(point: CGPoint) {
        
        if indexPath == nil || (indexPath?.section)! > 0 || indexPath?.item == 0 {return}
        let endCell = collectionView.cellForItem(at: indexPath!)
        
        UIView.animate(withDuration: 0.25, animations: {
            
            self.dragingItem.transform = CGAffineTransform.identity
            self.dragingItem.center = (endCell?.center)!
            
        }, completion: {
            
            (finish) -> () in
            
            endCell?.isHidden = false
            self.dragingItem.isHidden = true
            self.indexPath = nil
            
        })
    }
}

//MARK: - UICollectionViewDelegate 方法
extension MoreViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        return section == 0 ? selectedArr.count : recommendArr.count
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ChannelViewCellIdentifier, for: indexPath) as! ChannelViewCell
        
        cell.text = indexPath.section == 0 ? (selectedArr[indexPath.item] as AppInfoModel).name! : (recommendArr[indexPath.item] as AppInfoModel).name!
        cell.edite = (indexPath.section == 0 && (indexPath.item == 0 || indexPath.item == 1 || indexPath.item == 2)) ? false : isEdite
        cell.image.image = indexPath.section == 0 ? (UIImage(named: (selectedArr[indexPath.item] as AppInfoModel).imageName!)) : (UIImage(named: (recommendArr[indexPath.item] as AppInfoModel).imageName!))
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        
        
        if indexPath.section > 0 {
            
            // 更新数据
            let obj = recommendArr[indexPath.item]
            recommendArr.remove(at: indexPath.item)
            selectedArr.append(obj)
            collectionView.moveItem(at: indexPath, to: NSIndexPath(item: selectedArr.count - 1, section: 0) as IndexPath)
            
        } else {
            
            if isEdite {
                
                if indexPath.item == 0 || indexPath.item == 1 || indexPath.item == 2 {return}
                // 更新数据
                let obj = selectedArr[indexPath.item]
                selectedArr.remove(at: indexPath.item)
                recommendArr.insert(obj, at: 0)

                collectionView.moveItem(at: indexPath, to: NSIndexPath(item: 0, section: 1) as IndexPath)
                
            } else {
                
//                if switchoverCallback != nil {
//                    switchoverCallback!(selectedArr, recommendArr)
//                    _ = navigationController?.popViewController(animated: true)
//                }
            }
        }
        
        
        
    }
    
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        
        let header = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: ChannelViewHeaderIdentifier, for: indexPath) as! ChannelHeaderView
        header.text = isEdite ? headerArr[1][indexPath.section] : headerArr[0][indexPath.section]
        header.button.isSelected = isEdite
        if indexPath.section > 0 {header.button.isHidden = true} else {header.button.isHidden = false}
        
        
        header.clickCallback = {[weak self] in
            
            self?.isEdite = !(self?.isEdite)!
            collectionView.reloadData()
            
        }
        
        return header
        
    }
    
}


//MARK: - 自定义cell
class ChannelViewCell: UICollectionViewCell {
    
    var image: UIImageView!
    
    var edite = true {
        didSet {
            imageView.isHidden = !edite
        }
    }
    
    var text: String? {
        didSet {
            label.text = text
        }
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        setupUI()
    }
    
    private func setupUI() {
        
        contentView.backgroundColor = UIColor.white

        image = UIImageView()
        contentView.addSubview(image)
        image.image = UIImage(named: "deng_ji_xin_xi")
        image.snp.makeConstraints { (make) in
            make.centerY.equalTo(contentView).offset(-10)
            make.centerX.equalTo(contentView)
            make.width.height.equalTo(20)
        }
        
        contentView.addSubview(label)
        label.snp.makeConstraints { (make) in
            make.centerY.equalTo(contentView).offset(20)
            make.centerX.equalTo(contentView)
        }
        contentView.addSubview(imageView)
    }
    
    private lazy var label: UILabel = {
        let label = UILabel()
        label.font = UIFont.normal(15)
        label.numberOfLines = 2
        label.textAlignment = .left
        label.adjustsFontSizeToFitWidth = true
        
        return label
    }()
    
    private lazy var imageView: UIImageView = {
        
        let image = UIImageView(frame: CGRect(x: 5, y: 5, width: 20, height: 20))
        image.image = UIImage(named: "close")
        image.isHidden = true
        return image
        
    }()
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}
//MARK: - 自定义头视图
class ChannelHeaderView: UICollectionReusableView {
    
    var clickCallback: (() -> ())?
    
    var text: String? {
        
        didSet {
            
            label.text = text
            
        }
        
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        setupUI()
    }
    
    private func setupUI() {
        
        addSubview(label)
        addSubview(button)
        backgroundColor = UIColor.groupTableViewBackground
    }
    
    func buttonClick() {
        
        if (clickCallback != nil) { clickCallback!() }
    }
    
    
    private lazy var label: UILabel = {
        
        let label = UILabel(frame: self.bounds)
        label.frame.origin.x = 20
        return label
    }()
    
    lazy var button: UIButton = {
        
        let btn = UIButton(type: UIButtonType.custom)
        btn.setTitle("编辑", for: .normal)
        btn.setTitle("完成", for: .selected)
        btn.setTitleColor(UIColor.blue, for: .normal)
        btn.titleLabel?.font = UIFont.systemFont(ofSize: 15)
        btn.frame = CGRect(x: SCREEN_WIDTH - 80, y: 0, width: 80, height: self.frame.height)
        btn.addTarget(self, action: #selector(buttonClick), for: .touchUpInside)
        return btn
        
    }()
    
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}
//MARK: - 自定义布局属性
class ChannelViewLayout: UICollectionViewFlowLayout {
    
    override func prepare() {
        super.prepare()
        
        headerReferenceSize = CGSize(width: SCREEN_WIDTH, height: 40)
//        itemSize = CGSize(width: itemW, height: itemW * 0.5)
//        minimumLineSpacing = 15
//        minimumInteritemSpacing = 20
//        sectionInset = UIEdgeInsets(top: 10, left: 20, bottom: 10, right: 20)
        
        let interval: CGFloat = 0.5
        let width = screenWidth/3
        scrollDirection = .vertical
        itemSize = CGSize(width: width - interval, height: width - interval)
        minimumInteritemSpacing = interval //纵间距
        minimumLineSpacing = interval //行间距
        sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 1, right: 0)
    }
}
