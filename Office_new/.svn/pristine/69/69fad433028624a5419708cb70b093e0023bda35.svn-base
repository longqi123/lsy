//
//  AppListController.swift
//  Office
//
//  Created by GA GA on 22/05/2017.
//  Copyright © 2017 roger. All rights reserved.
//

import UIKit
import CoreFramework
import HandyJSON

class AppListController: UIViewController {
    let cellId = "cellId"
    
    /// 应用列表
    var dataSource = [AppSquareModel]()
    /// 已关注应用
    var appsModel = [WorkDeskModel]()

    var yyfl = ""
    var yymc = ""
    var gnxx = ""
    var isSearchVC = false
    var isFollowedVC = false

    var tableView = UITableView(frame: .zero, style: .grouped)
    
    init(yyfl: String) {
        super.init(nibName: nil, bundle: nil)
        self.title = "应用列表"
        self.yyfl = yyfl
        self.getData()
    }
    
    init(isFollowedVC: Bool) {
        super.init(nibName: nil, bundle: nil)
        self.title = "已关注应用"
        self.isFollowedVC = isFollowedVC
//       self.getFollowedData()
    }
    
    init(yymc: String, isSearchVC: Bool) {
        super.init(nibName: nil, bundle: nil)
        self.title = yymc
        self.yymc = yymc
        self.isSearchVC = isSearchVC
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        navigationController?.navigationBar.topItem?.backBarButtonItem = UIBarButtonItem(title: "", style: UIBarButtonItemStyle.plain, target: nil, action: nil)
        
        view.addSubview(tableView)
        tableView.delegate = self
        tableView.dataSource = self
        tableView.snp.makeConstraints { (make) in
            make.bottom.equalTo(view)
            make.left.equalTo(view)
            make.right.equalTo(view)
            make.top.equalTo(view)
        }
        tableView.register(AppListCell.self, forCellReuseIdentifier: cellId)
//        getData()
    }

}

extension AppListController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 44
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0.0001
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! AppListCell
        if self.isFollowedVC {
            cell.set(json: appsModel[indexPath.row])
        } else {
            cell.set(json: dataSource[indexPath.row])
        }
        cell.isFollowedClosure = { [weak self] in
        
            self?.isFollowed(index: indexPath.row)
        }
        return cell
    }
    
}

extension AppListController {
    
    func getData() {
        //        guard let zhxx = DataCenter.ryxqModel?.rydm, let swjgdm = DataCenter.ryxqModel?.swjgdm else {
        //            return
        //        }
        //        let dqys = 1
        //        let myts = 50
        //        let zts = ""
        //        let yymc = ""
        //        let gnxx = 1
        //        let yyfl = 1002
        //        let topts = 10
        //        let yylb = ""
        //        let jczxDm = 0202
        
        let para : [String: Any]
        if isSearchVC {
            gnxx = "2"
        } else {
            gnxx = "3"
        }
        var s = ""
        s += "<yyzsfwRequestFrom>"
        s += "<zhxx>\(25109231221)</zhxx>"
        s += "<swjgDm>\(25109231300)</swjgDm>"
        s += "<fengy>"
        s += "<FenyeVO>"
        s += "<dqys>1</dqys>"
        s += "<myts>50</myts>"
        s += "<zts></zts>"
        s += "</FenyeVO>"
        s += "</fengy>"
        s += "<yymc>\(yymc)</yymc>"
        s += "<gnxx>\(gnxx)</gnxx>"
        s += "<yyfl>\(yyfl)</yyfl>"
        s += "<topts></topts>"
        s += "<jczxDm>0201</jczxDm>"
        s += "</yyzsfwRequestFrom>"
        
        para = paraMaker(data: ["tranId":"SCDS.HLWGZPT.MH.YYZS","s": s], sid: "D6666", extra: [:])
        showloading()
        Network.post(parameter: para, success: { (json) in
            print(json)
            
            if json["result"]["yyzsResponseForm"]["yyzsfwResponseForm"]["yyzsResponselb"]["yyzsfwResponseGrid"]["yyzsfwResponselb"].isEmpty {
                self.hideloading()
            } else {
                self.dataSource = json["result"]["yyzsResponseForm"]["yyzsfwResponseForm"]["yyzsResponselb"]["yyzsfwResponseGrid"]["yyzsfwResponselb"].arrayResult.map{AppSquareModel(json:$0)}
                self.hideloading()
            }
            
            self.tableView.reloadData()
        }) { (error) in
            print(error)
            self.hideloading()
        }
        
    }
    
    
    /// 已关注应用
    func getFollowedData() {
        let para: [String: Any]
        var s = ""
        //        let rydm = DataCenter.ryxqModel?.rydm
        s += "<yyxxhqRequestFrom>"
        s += "<zhxx>\(25109231221)</zhxx>"
        s += "</yyxxhqRequestFrom>"
        
        para = paraMaker(data: ["tranId":"SCDS.HLWGZPT.MH.YYXXHQ", "s": s], sid: "D6666", extra: [:])
        Network.post(parameter: para, success: { (json) in
            let result = json["result"]["yyxxhqResponseForm"]["yyxxhqResponseGrid"]["yyxxhqResponselb"]
            if result.count > 0 {
                if result.array != nil {
                    self.appsModel = result.arrayValue.map(WorkDeskModel.init)
                    self.tableView.reloadData()

                } else {
                    self.appsModel = [JSONDeserializer<WorkDeskModel>.deserializeFrom(json:result.rawString())!]
                    self.tableView.reloadData()

                }
            }
            
        }) { (error) in
            print(error)
        }
    }
    
    func isFollowed(index: Int) {
        
        let para : [String: Any]
        var s = ""
       
        s += "<yygzfwRequestFrom>"
        s += "<zhxx>\(25109231221)</zhxx>"
        s += "<yyid>\(self.dataSource[index].yyid)</yyid>"
        s += "<sfgz>\(self.dataSource[index].sfgz)</sfgz>"
        s += "</yygzfwRequestFrom>"
        
        para = paraMaker(data: ["tranId":"SCDS.HLWGZPT.MH.YYGZ","s": s], sid: "D6666", extra: [:])
        showloading()
        Network.post(parameter: para, success: { (json) in
            print(json)
            let sfgz = json["result"]["yygzResponseForm"]["sfgz"].stringValue
            self.dataSource[index].sfgz = sfgz
            self.tableView.reloadData()
            self.hideloading()
            
        }) { (error) in
            ProgressHUD.toast(message: error)
            self.hideloading()
        }
        

    }
}

